<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
	"http://struts.apache.org/dtds/struts-2.3.dtd">

<struts>
<!-- 
    <constant name="struts.enable.DynamicMethodInvocation" value="false" />
    <constant name="struts.devMode" value="true" />

    <package name="default" namespace="/" extends="struts-default">

        <default-action-ref name="index" />

        <global-results>
            <result name="error">/error.jsp</result>
        </global-results>

        <global-exception-mappings>
            <exception-mapping exception="java.lang.Exception" result="error"/>
        </global-exception-mappings>

        <action name="index">
            <result type="redirectAction">
                <param name="actionName">HelloWorld</param>
                <param name="namespace">/example</param>
            </result>
        </action>
    </package>

    <include file="example.xml"/>
 -->
 <!--devMode表示开发模式   设置为true 后 改动xml不用在启动服务器了  而是xml有改动的话 马上反映到服务器 -->
  <!--<constant name="struts.devMode" value="true" />
  <package name="default" namespace="/" extends="struts-default">

        <action name="hello">
            <result>
            	/Hello.jsp
            </result>
        </action>
    </package>
    Add packages here -->
     <!-- 开启使用开发模式，详细错误提示 -->
    <!-- <constant name="struts.devMode" value="true"/>-->
    <!-- 指定每次请求到达，重新加载资源文件 -->
    <!-- <constant name="struts.i18n.reload" value="true"/>-->
    <!-- 指定每次配置文件更改后，自动重新加载 -->
    <constant name="struts.configuration.xml.reload" value="true"/>
    <!-- 指定XSLT Result使用样式表缓存 -->
    <!-- <constant name="struts.xslt.nocache" value="true"/>-->
    <!-- 将 devMode设置为true后  修改本xml  不用在再重新启动服务器-->
	<constant name="struts.devMode" value="true" />
	<!-- 通过这个配置可以解决中文乱码问题  -->
	<constant name="struts.i18n.encode" value="GBK"/>
	<!-- 想要使用动态调用方法 必须将 DynamicMethodInvocation设置为true-->
    <constant name="struts.enable.DynamicMethodInvocation" value="true" />
    
	<!-- package可以用于区分前后台 功能划分等防止里面的action重名，
		namespace 决定了action的访问路径，默认为“”，可以接收所有路径的action
		为index.action，/xx/xx/xx/index.action 或者/xx/yy/index.action -->
 	<package name="front" namespace="/front" extends="struts-default">

        <action name="index" class="com.soft.xww.action.ActionTest1">
            <result name="success">/Hello.jsp</result>
        </action>
    </package>
    
    <package name="path" namespace="/path" extends="struts-default">
    <!-- 给action指定method后 用户访问action index.action 会调用 add方法，而不是execute方法
    	<action name="index" class="com.soft.xww.action.ActionTest1" method="add">
    		<result name="success">/Hello.jsp</result>
    	</action> -->

    	<!-- 用户可以用action!方法名的方式动态调用 class中的方法-->
    	<action name="path" class="com.soft.xww.action.ActionTest1">
    		<result name="success">/Hello.jsp</result>
    		<result name="failed">/index.jsp</result>
    	    <result name="update">/trunuse.jsp</result>
    	</action>
    	
    	<!-- 通配符 1-->
    	<action name="tongpei_*" class="com.soft.xww.action.ActionTest1" method="{1}">
    		<result name="success">/Hello_{1}.jsp</result>
    	</action>
    	
    	<!-- 通配符 2 虽然配置简单 量少  但是新建类  jsp必须按相应的规则创建-->
    	<action name="*_*" class="com.soft.xww.action.{1}Action" method="{2}">
    		<result name="success">/{1}_{2}.jsp</result>
    		<result name="error">/{1}_error.jsp</result>
    	</action>
    </package>
    <!-- 可以弄多个配置文件 -->
	<include file="login.xml"/>
	<include file="dongtai.xml"/>
	<include file="reirecte.xml"/>
</struts>
